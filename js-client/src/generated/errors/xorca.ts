/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from "@solana/kit";
import { XORCA_PROGRAM_ADDRESS } from "../programs";

/** UnknownInstructionDiscriminator: Unknown instruction discriminator */
export const XORCA_ERROR__UNKNOWN_INSTRUCTION_DISCRIMINATOR = 0x1770; // 6000
/** IncorrectProgramId: Incorrect program id */
export const XORCA_ERROR__INCORRECT_PROGRAM_ID = 0x1771; // 6001
/** InvalidAccountRole: Invalid account role */
export const XORCA_ERROR__INVALID_ACCOUNT_ROLE = 0x1772; // 6002
/** NotEnoughAccountKeys: Not enough account keys */
export const XORCA_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = 0x1773; // 6003
/** IncorrectOwner: Incorrect owner */
export const XORCA_ERROR__INCORRECT_OWNER = 0x1774; // 6004
/** InvalidSeeds: Invalid seeds */
export const XORCA_ERROR__INVALID_SEEDS = 0x1775; // 6005
/** IncorrectAccountAddress: Invalid account address */
export const XORCA_ERROR__INCORRECT_ACCOUNT_ADDRESS = 0x1776; // 6006
/** InvalidAccountData: Invalid account data */
export const XORCA_ERROR__INVALID_ACCOUNT_DATA = 0x1777; // 6007
/** ArithmeticError: Arithmetic error */
export const XORCA_ERROR__ARITHMETIC_ERROR = 0x1778; // 6008

export type XorcaError =
  | typeof XORCA_ERROR__ARITHMETIC_ERROR
  | typeof XORCA_ERROR__INCORRECT_ACCOUNT_ADDRESS
  | typeof XORCA_ERROR__INCORRECT_OWNER
  | typeof XORCA_ERROR__INCORRECT_PROGRAM_ID
  | typeof XORCA_ERROR__INVALID_ACCOUNT_DATA
  | typeof XORCA_ERROR__INVALID_ACCOUNT_ROLE
  | typeof XORCA_ERROR__INVALID_SEEDS
  | typeof XORCA_ERROR__NOT_ENOUGH_ACCOUNT_KEYS
  | typeof XORCA_ERROR__UNKNOWN_INSTRUCTION_DISCRIMINATOR;

let xorcaErrorMessages: Record<XorcaError, string> | undefined;
if (process.env.NODE_ENV !== "production") {
  xorcaErrorMessages = {
    [XORCA_ERROR__ARITHMETIC_ERROR]: `Arithmetic error`,
    [XORCA_ERROR__INCORRECT_ACCOUNT_ADDRESS]: `Invalid account address`,
    [XORCA_ERROR__INCORRECT_OWNER]: `Incorrect owner`,
    [XORCA_ERROR__INCORRECT_PROGRAM_ID]: `Incorrect program id`,
    [XORCA_ERROR__INVALID_ACCOUNT_DATA]: `Invalid account data`,
    [XORCA_ERROR__INVALID_ACCOUNT_ROLE]: `Invalid account role`,
    [XORCA_ERROR__INVALID_SEEDS]: `Invalid seeds`,
    [XORCA_ERROR__NOT_ENOUGH_ACCOUNT_KEYS]: `Not enough account keys`,
    [XORCA_ERROR__UNKNOWN_INSTRUCTION_DISCRIMINATOR]: `Unknown instruction discriminator`,
  };
}

export function getXorcaErrorMessage(code: XorcaError): string {
  if (process.env.NODE_ENV !== "production") {
    return (xorcaErrorMessages as Record<XorcaError, string>)[code];
  }

  return "Error message not available in production bundles.";
}

export function isXorcaError<TProgramErrorCode extends XorcaError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    XORCA_PROGRAM_ADDRESS,
    code,
  );
}
