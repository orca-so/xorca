/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';

/** UnknownInstructionDiscriminator: Unknown instruction discriminator */
export const XORCA_STAKING_PROGRAM_ERROR__UNKNOWN_INSTRUCTION_DISCRIMINATOR = 0x1770; // 6000
/** IncorrectProgramId: Incorrect program id */
export const XORCA_STAKING_PROGRAM_ERROR__INCORRECT_PROGRAM_ID = 0x1771; // 6001
/** InvalidAccountRole: Invalid account role */
export const XORCA_STAKING_PROGRAM_ERROR__INVALID_ACCOUNT_ROLE = 0x1772; // 6002
/** AccountAlreadyExists: Account Already Exists  */
export const XORCA_STAKING_PROGRAM_ERROR__ACCOUNT_ALREADY_EXISTS = 0x1773; // 6003
/** NotEnoughAccountKeys: Not enough account keys */
export const XORCA_STAKING_PROGRAM_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = 0x1774; // 6004
/** IncorrectOwner: Incorrect owner */
export const XORCA_STAKING_PROGRAM_ERROR__INCORRECT_OWNER = 0x1775; // 6005
/** InvalidSeeds: Invalid seeds */
export const XORCA_STAKING_PROGRAM_ERROR__INVALID_SEEDS = 0x1776; // 6006
/** IncorrectAccountAddress: Invalid account address */
export const XORCA_STAKING_PROGRAM_ERROR__INCORRECT_ACCOUNT_ADDRESS = 0x1777; // 6007
/** InvalidAccountData: Invalid account data */
export const XORCA_STAKING_PROGRAM_ERROR__INVALID_ACCOUNT_DATA = 0x1778; // 6008
/** ArithmeticError: Arithmetic error */
export const XORCA_STAKING_PROGRAM_ERROR__ARITHMETIC_ERROR = 0x1779; // 6009
/** InsufficientFunds: Insufficient funds error */
export const XORCA_STAKING_PROGRAM_ERROR__INSUFFICIENT_FUNDS = 0x177a; // 6010

export type XorcaStakingProgramError =
  | typeof XORCA_STAKING_PROGRAM_ERROR__ACCOUNT_ALREADY_EXISTS
  | typeof XORCA_STAKING_PROGRAM_ERROR__ARITHMETIC_ERROR
  | typeof XORCA_STAKING_PROGRAM_ERROR__INCORRECT_ACCOUNT_ADDRESS
  | typeof XORCA_STAKING_PROGRAM_ERROR__INCORRECT_OWNER
  | typeof XORCA_STAKING_PROGRAM_ERROR__INCORRECT_PROGRAM_ID
  | typeof XORCA_STAKING_PROGRAM_ERROR__INSUFFICIENT_FUNDS
  | typeof XORCA_STAKING_PROGRAM_ERROR__INVALID_ACCOUNT_DATA
  | typeof XORCA_STAKING_PROGRAM_ERROR__INVALID_ACCOUNT_ROLE
  | typeof XORCA_STAKING_PROGRAM_ERROR__INVALID_SEEDS
  | typeof XORCA_STAKING_PROGRAM_ERROR__NOT_ENOUGH_ACCOUNT_KEYS
  | typeof XORCA_STAKING_PROGRAM_ERROR__UNKNOWN_INSTRUCTION_DISCRIMINATOR;

let xorcaStakingProgramErrorMessages:
  | Record<XorcaStakingProgramError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  xorcaStakingProgramErrorMessages = {
    [XORCA_STAKING_PROGRAM_ERROR__ACCOUNT_ALREADY_EXISTS]: `Account Already Exists `,
    [XORCA_STAKING_PROGRAM_ERROR__ARITHMETIC_ERROR]: `Arithmetic error`,
    [XORCA_STAKING_PROGRAM_ERROR__INCORRECT_ACCOUNT_ADDRESS]: `Invalid account address`,
    [XORCA_STAKING_PROGRAM_ERROR__INCORRECT_OWNER]: `Incorrect owner`,
    [XORCA_STAKING_PROGRAM_ERROR__INCORRECT_PROGRAM_ID]: `Incorrect program id`,
    [XORCA_STAKING_PROGRAM_ERROR__INSUFFICIENT_FUNDS]: `Insufficient funds error`,
    [XORCA_STAKING_PROGRAM_ERROR__INVALID_ACCOUNT_DATA]: `Invalid account data`,
    [XORCA_STAKING_PROGRAM_ERROR__INVALID_ACCOUNT_ROLE]: `Invalid account role`,
    [XORCA_STAKING_PROGRAM_ERROR__INVALID_SEEDS]: `Invalid seeds`,
    [XORCA_STAKING_PROGRAM_ERROR__NOT_ENOUGH_ACCOUNT_KEYS]: `Not enough account keys`,
    [XORCA_STAKING_PROGRAM_ERROR__UNKNOWN_INSTRUCTION_DISCRIMINATOR]: `Unknown instruction discriminator`,
  };
}

export function getXorcaStakingProgramErrorMessage(
  code: XorcaStakingProgramError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      xorcaStakingProgramErrorMessages as Record<
        XorcaStakingProgramError,
        string
      >
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isXorcaStakingProgramError<
  TProgramErrorCode extends XorcaStakingProgramError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
    code
  );
}
