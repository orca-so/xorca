/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { containsBytes, getU8Encoder, type Address, type ReadonlyUint8Array } from '@solana/kit';
import {
  type ParsedInitializeInstruction,
  type ParsedSetInstruction,
  type ParsedStakeInstruction,
  type ParsedUnstakeInstruction,
  type ParsedWithdrawInstruction,
} from '../instructions';
import { AccountDiscriminator, getAccountDiscriminatorEncoder } from '../types';

export const XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS =
  '2WTJWHG5LMsZUiUxTrTTGT5RzPkRYxiVCft4TnJEiQLF' as Address<'2WTJWHG5LMsZUiUxTrTTGT5RzPkRYxiVCft4TnJEiQLF'>;

export enum XorcaStakingProgramAccount {
  PendingWithdraw,
  State,
}

export function identifyXorcaStakingProgramAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): XorcaStakingProgramAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      getAccountDiscriminatorEncoder().encode(AccountDiscriminator.PendingWithdraw),
      0
    )
  ) {
    return XorcaStakingProgramAccount.PendingWithdraw;
  }
  if (containsBytes(data, getAccountDiscriminatorEncoder().encode(AccountDiscriminator.State), 0)) {
    return XorcaStakingProgramAccount.State;
  }
  throw new Error('The provided account could not be identified as a xorcaStakingProgram account.');
}

export enum XorcaStakingProgramInstruction {
  Stake,
  Unstake,
  Withdraw,
  Initialize,
  Set,
}

export function identifyXorcaStakingProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): XorcaStakingProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return XorcaStakingProgramInstruction.Stake;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return XorcaStakingProgramInstruction.Unstake;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return XorcaStakingProgramInstruction.Withdraw;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return XorcaStakingProgramInstruction.Initialize;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return XorcaStakingProgramInstruction.Set;
  }
  throw new Error(
    'The provided instruction could not be identified as a xorcaStakingProgram instruction.'
  );
}

export type ParsedXorcaStakingProgramInstruction<
  TProgram extends string = '2WTJWHG5LMsZUiUxTrTTGT5RzPkRYxiVCft4TnJEiQLF',
> =
  | ({
      instructionType: XorcaStakingProgramInstruction.Stake;
    } & ParsedStakeInstruction<TProgram>)
  | ({
      instructionType: XorcaStakingProgramInstruction.Unstake;
    } & ParsedUnstakeInstruction<TProgram>)
  | ({
      instructionType: XorcaStakingProgramInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>)
  | ({
      instructionType: XorcaStakingProgramInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: XorcaStakingProgramInstruction.Set;
    } & ParsedSetInstruction<TProgram>);
