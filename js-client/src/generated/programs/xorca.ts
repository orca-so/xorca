/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  type ParsedDepositInstruction,
  type ParsedStakingPoolInitializeInstruction,
  type ParsedWithdrawInstruction,
} from "../instructions";
import { AccountDiscriminator, getAccountDiscriminatorEncoder } from "../types";

export const XORCA_PROGRAM_ADDRESS =
  "5kyCqwYt8Pk65g3cG45SaBa2CBvjjBuaWiE3ubf2JcwY" as Address<"5kyCqwYt8Pk65g3cG45SaBa2CBvjjBuaWiE3ubf2JcwY">;

export enum XorcaAccount {
  StakingPool,
}

export function identifyXorcaAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): XorcaAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      getAccountDiscriminatorEncoder().encode(AccountDiscriminator.StakingPool),
      0,
    )
  ) {
    return XorcaAccount.StakingPool;
  }
  throw new Error(
    "The provided account could not be identified as a xorca account.",
  );
}

export enum XorcaInstruction {
  StakingPoolInitialize,
  Deposit,
  Withdraw,
}

export function identifyXorcaInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): XorcaInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return XorcaInstruction.StakingPoolInitialize;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return XorcaInstruction.Deposit;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return XorcaInstruction.Withdraw;
  }
  throw new Error(
    "The provided instruction could not be identified as a xorca instruction.",
  );
}

export type ParsedXorcaInstruction<
  TProgram extends string = "5kyCqwYt8Pk65g3cG45SaBa2CBvjjBuaWiE3ubf2JcwY",
> =
  | ({
      instructionType: XorcaInstruction.StakingPoolInitialize;
    } & ParsedStakingPoolInitializeInstruction<TProgram>)
  | ({
      instructionType: XorcaInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: XorcaInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>);
