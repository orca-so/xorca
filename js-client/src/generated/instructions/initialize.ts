/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_DISCRIMINATOR = 3;

export function getInitializeDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountPayerAccount extends string | AccountMeta<string> = string,
  TAccountUpdateAuthorityAccount extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountVaultAccount extends string | AccountMeta<string> = string,
  TAccountXorcaMintAccount extends string | AccountMeta<string> = string,
  TAccountOrcaMintAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgramAccount extends string | AccountMeta<string> = string,
  TAccountSplTokenProgramAccount extends string | AccountMeta<string> = string,
  TAccountToken2022ProgramAccount extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgramAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayerAccount extends string
        ? WritableSignerAccount<TAccountPayerAccount> & AccountSignerMeta<TAccountPayerAccount>
        : TAccountPayerAccount,
      TAccountUpdateAuthorityAccount extends string
        ? WritableSignerAccount<TAccountUpdateAuthorityAccount> &
            AccountSignerMeta<TAccountUpdateAuthorityAccount>
        : TAccountUpdateAuthorityAccount,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountVaultAccount extends string
        ? WritableAccount<TAccountVaultAccount>
        : TAccountVaultAccount,
      TAccountXorcaMintAccount extends string
        ? ReadonlyAccount<TAccountXorcaMintAccount>
        : TAccountXorcaMintAccount,
      TAccountOrcaMintAccount extends string
        ? ReadonlyAccount<TAccountOrcaMintAccount>
        : TAccountOrcaMintAccount,
      TAccountSystemProgramAccount extends string
        ? ReadonlyAccount<TAccountSystemProgramAccount>
        : TAccountSystemProgramAccount,
      TAccountSplTokenProgramAccount extends string
        ? ReadonlyAccount<TAccountSplTokenProgramAccount>
        : TAccountSplTokenProgramAccount,
      TAccountToken2022ProgramAccount extends string
        ? ReadonlyAccount<TAccountToken2022ProgramAccount>
        : TAccountToken2022ProgramAccount,
      TAccountAssociatedTokenProgramAccount extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgramAccount>
        : TAccountAssociatedTokenProgramAccount,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: number;
  coolDownPeriodS: bigint;
};

export type InitializeInstructionDataArgs = {
  coolDownPeriodS: number | bigint;
};

export function getInitializeInstructionDataEncoder(): FixedSizeEncoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['coolDownPeriodS', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): FixedSizeDecoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['coolDownPeriodS', getI64Decoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): FixedSizeCodec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(getInitializeInstructionDataEncoder(), getInitializeInstructionDataDecoder());
}

export type InitializeInput<
  TAccountPayerAccount extends string = string,
  TAccountUpdateAuthorityAccount extends string = string,
  TAccountStateAccount extends string = string,
  TAccountVaultAccount extends string = string,
  TAccountXorcaMintAccount extends string = string,
  TAccountOrcaMintAccount extends string = string,
  TAccountSystemProgramAccount extends string = string,
  TAccountSplTokenProgramAccount extends string = string,
  TAccountToken2022ProgramAccount extends string = string,
  TAccountAssociatedTokenProgramAccount extends string = string,
> = {
  payerAccount: TransactionSigner<TAccountPayerAccount>;
  updateAuthorityAccount: TransactionSigner<TAccountUpdateAuthorityAccount>;
  stateAccount: Address<TAccountStateAccount>;
  vaultAccount: Address<TAccountVaultAccount>;
  xorcaMintAccount: Address<TAccountXorcaMintAccount>;
  orcaMintAccount: Address<TAccountOrcaMintAccount>;
  systemProgramAccount: Address<TAccountSystemProgramAccount>;
  splTokenProgramAccount: Address<TAccountSplTokenProgramAccount>;
  token2022ProgramAccount: Address<TAccountToken2022ProgramAccount>;
  associatedTokenProgramAccount: Address<TAccountAssociatedTokenProgramAccount>;
  coolDownPeriodS: InitializeInstructionDataArgs['coolDownPeriodS'];
};

export function getInitializeInstruction<
  TAccountPayerAccount extends string,
  TAccountUpdateAuthorityAccount extends string,
  TAccountStateAccount extends string,
  TAccountVaultAccount extends string,
  TAccountXorcaMintAccount extends string,
  TAccountOrcaMintAccount extends string,
  TAccountSystemProgramAccount extends string,
  TAccountSplTokenProgramAccount extends string,
  TAccountToken2022ProgramAccount extends string,
  TAccountAssociatedTokenProgramAccount extends string,
  TProgramAddress extends Address = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountPayerAccount,
    TAccountUpdateAuthorityAccount,
    TAccountStateAccount,
    TAccountVaultAccount,
    TAccountXorcaMintAccount,
    TAccountOrcaMintAccount,
    TAccountSystemProgramAccount,
    TAccountSplTokenProgramAccount,
    TAccountToken2022ProgramAccount,
    TAccountAssociatedTokenProgramAccount
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountPayerAccount,
  TAccountUpdateAuthorityAccount,
  TAccountStateAccount,
  TAccountVaultAccount,
  TAccountXorcaMintAccount,
  TAccountOrcaMintAccount,
  TAccountSystemProgramAccount,
  TAccountSplTokenProgramAccount,
  TAccountToken2022ProgramAccount,
  TAccountAssociatedTokenProgramAccount
> {
  // Program address.
  const programAddress = config?.programAddress ?? XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payerAccount: { value: input.payerAccount ?? null, isWritable: true },
    updateAuthorityAccount: {
      value: input.updateAuthorityAccount ?? null,
      isWritable: true,
    },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    vaultAccount: { value: input.vaultAccount ?? null, isWritable: true },
    xorcaMintAccount: {
      value: input.xorcaMintAccount ?? null,
      isWritable: false,
    },
    orcaMintAccount: {
      value: input.orcaMintAccount ?? null,
      isWritable: false,
    },
    systemProgramAccount: {
      value: input.systemProgramAccount ?? null,
      isWritable: false,
    },
    splTokenProgramAccount: {
      value: input.splTokenProgramAccount ?? null,
      isWritable: false,
    },
    token2022ProgramAccount: {
      value: input.token2022ProgramAccount ?? null,
      isWritable: false,
    },
    associatedTokenProgramAccount: {
      value: input.associatedTokenProgramAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payerAccount),
      getAccountMeta(accounts.updateAuthorityAccount),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.vaultAccount),
      getAccountMeta(accounts.xorcaMintAccount),
      getAccountMeta(accounts.orcaMintAccount),
      getAccountMeta(accounts.systemProgramAccount),
      getAccountMeta(accounts.splTokenProgramAccount),
      getAccountMeta(accounts.token2022ProgramAccount),
      getAccountMeta(accounts.associatedTokenProgramAccount),
    ],
    data: getInitializeInstructionDataEncoder().encode(args as InitializeInstructionDataArgs),
    programAddress,
  } as InitializeInstruction<
    TProgramAddress,
    TAccountPayerAccount,
    TAccountUpdateAuthorityAccount,
    TAccountStateAccount,
    TAccountVaultAccount,
    TAccountXorcaMintAccount,
    TAccountOrcaMintAccount,
    TAccountSystemProgramAccount,
    TAccountSplTokenProgramAccount,
    TAccountToken2022ProgramAccount,
    TAccountAssociatedTokenProgramAccount
  >);
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payerAccount: TAccountMetas[0];
    updateAuthorityAccount: TAccountMetas[1];
    stateAccount: TAccountMetas[2];
    vaultAccount: TAccountMetas[3];
    xorcaMintAccount: TAccountMetas[4];
    orcaMintAccount: TAccountMetas[5];
    systemProgramAccount: TAccountMetas[6];
    splTokenProgramAccount: TAccountMetas[7];
    token2022ProgramAccount: TAccountMetas[8];
    associatedTokenProgramAccount: TAccountMetas[9];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payerAccount: getNextAccount(),
      updateAuthorityAccount: getNextAccount(),
      stateAccount: getNextAccount(),
      vaultAccount: getNextAccount(),
      xorcaMintAccount: getNextAccount(),
      orcaMintAccount: getNextAccount(),
      systemProgramAccount: getNextAccount(),
      splTokenProgramAccount: getNextAccount(),
      token2022ProgramAccount: getNextAccount(),
      associatedTokenProgramAccount: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
