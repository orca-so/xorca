/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_DISCRIMINATOR = 3;

export function getInitializeDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountPayerAccount extends string | IAccountMeta<string> = string,
  TAccountStateAccount extends string | IAccountMeta<string> = string,
  TAccountXorcaMintAccount extends string | IAccountMeta<string> = string,
  TAccountOrcaMintAccount extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthorityAccount extends string | IAccountMeta<string> = string,
  TAccountSystemProgramAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayerAccount extends string
        ? WritableSignerAccount<TAccountPayerAccount> & IAccountSignerMeta<TAccountPayerAccount>
        : TAccountPayerAccount,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountXorcaMintAccount extends string
        ? ReadonlyAccount<TAccountXorcaMintAccount>
        : TAccountXorcaMintAccount,
      TAccountOrcaMintAccount extends string
        ? ReadonlyAccount<TAccountOrcaMintAccount>
        : TAccountOrcaMintAccount,
      TAccountUpdateAuthorityAccount extends string
        ? ReadonlyAccount<TAccountUpdateAuthorityAccount>
        : TAccountUpdateAuthorityAccount,
      TAccountSystemProgramAccount extends string
        ? ReadonlyAccount<TAccountSystemProgramAccount>
        : TAccountSystemProgramAccount,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: number;
  coolDownPeriodS: bigint;
};

export type InitializeInstructionDataArgs = {
  coolDownPeriodS: number | bigint;
};

export function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['coolDownPeriodS', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['coolDownPeriodS', getI64Decoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): Codec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(getInitializeInstructionDataEncoder(), getInitializeInstructionDataDecoder());
}

export type InitializeInput<
  TAccountPayerAccount extends string = string,
  TAccountStateAccount extends string = string,
  TAccountXorcaMintAccount extends string = string,
  TAccountOrcaMintAccount extends string = string,
  TAccountUpdateAuthorityAccount extends string = string,
  TAccountSystemProgramAccount extends string = string,
> = {
  payerAccount: TransactionSigner<TAccountPayerAccount>;
  stateAccount: Address<TAccountStateAccount>;
  xorcaMintAccount: Address<TAccountXorcaMintAccount>;
  orcaMintAccount: Address<TAccountOrcaMintAccount>;
  updateAuthorityAccount: Address<TAccountUpdateAuthorityAccount>;
  systemProgramAccount: Address<TAccountSystemProgramAccount>;
  coolDownPeriodS: InitializeInstructionDataArgs['coolDownPeriodS'];
};

export function getInitializeInstruction<
  TAccountPayerAccount extends string,
  TAccountStateAccount extends string,
  TAccountXorcaMintAccount extends string,
  TAccountOrcaMintAccount extends string,
  TAccountUpdateAuthorityAccount extends string,
  TAccountSystemProgramAccount extends string,
  TProgramAddress extends Address = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountPayerAccount,
    TAccountStateAccount,
    TAccountXorcaMintAccount,
    TAccountOrcaMintAccount,
    TAccountUpdateAuthorityAccount,
    TAccountSystemProgramAccount
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountPayerAccount,
  TAccountStateAccount,
  TAccountXorcaMintAccount,
  TAccountOrcaMintAccount,
  TAccountUpdateAuthorityAccount,
  TAccountSystemProgramAccount
> {
  // Program address.
  const programAddress = config?.programAddress ?? XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payerAccount: { value: input.payerAccount ?? null, isWritable: true },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    xorcaMintAccount: {
      value: input.xorcaMintAccount ?? null,
      isWritable: false,
    },
    orcaMintAccount: {
      value: input.orcaMintAccount ?? null,
      isWritable: false,
    },
    updateAuthorityAccount: {
      value: input.updateAuthorityAccount ?? null,
      isWritable: false,
    },
    systemProgramAccount: {
      value: input.systemProgramAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payerAccount),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.xorcaMintAccount),
      getAccountMeta(accounts.orcaMintAccount),
      getAccountMeta(accounts.updateAuthorityAccount),
      getAccountMeta(accounts.systemProgramAccount),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(args as InitializeInstructionDataArgs),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountPayerAccount,
    TAccountStateAccount,
    TAccountXorcaMintAccount,
    TAccountOrcaMintAccount,
    TAccountUpdateAuthorityAccount,
    TAccountSystemProgramAccount
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payerAccount: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    xorcaMintAccount: TAccountMetas[2];
    orcaMintAccount: TAccountMetas[3];
    updateAuthorityAccount: TAccountMetas[4];
    systemProgramAccount: TAccountMetas[5];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payerAccount: getNextAccount(),
      stateAccount: getNextAccount(),
      xorcaMintAccount: getNextAccount(),
      orcaMintAccount: getNextAccount(),
      updateAuthorityAccount: getNextAccount(),
      systemProgramAccount: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
