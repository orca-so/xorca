/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_DISCRIMINATOR = 5;

export function getInitializeDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountPayerAccount extends string | IAccountMeta<string> = string,
  TAccountStakingPoolAccount extends string | IAccountMeta<string> = string,
  TAccountLstMintAccount extends string | IAccountMeta<string> = string,
  TAccountStakeTokenMintAccount extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthorityAccount extends string | IAccountMeta<string> = string,
  TAccountSystemProgramAccount extends string | IAccountMeta<string> = string,
  TAccountTokenProgramAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayerAccount extends string
        ? WritableSignerAccount<TAccountPayerAccount> &
            IAccountSignerMeta<TAccountPayerAccount>
        : TAccountPayerAccount,
      TAccountStakingPoolAccount extends string
        ? WritableAccount<TAccountStakingPoolAccount>
        : TAccountStakingPoolAccount,
      TAccountLstMintAccount extends string
        ? ReadonlyAccount<TAccountLstMintAccount>
        : TAccountLstMintAccount,
      TAccountStakeTokenMintAccount extends string
        ? ReadonlyAccount<TAccountStakeTokenMintAccount>
        : TAccountStakeTokenMintAccount,
      TAccountUpdateAuthorityAccount extends string
        ? ReadonlyAccount<TAccountUpdateAuthorityAccount>
        : TAccountUpdateAuthorityAccount,
      TAccountSystemProgramAccount extends string
        ? ReadonlyAccount<TAccountSystemProgramAccount>
        : TAccountSystemProgramAccount,
      TAccountTokenProgramAccount extends string
        ? ReadonlyAccount<TAccountTokenProgramAccount>
        : TAccountTokenProgramAccount,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: number;
  windUpPeriodS: bigint;
  coolDownPeriodS: bigint;
  lstMintDecimals: number;
};

export type InitializeInstructionDataArgs = {
  windUpPeriodS: number | bigint;
  coolDownPeriodS: number | bigint;
  lstMintDecimals: number;
};

export function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['windUpPeriodS', getU64Encoder()],
      ['coolDownPeriodS', getU64Encoder()],
      ['lstMintDecimals', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['windUpPeriodS', getU64Decoder()],
    ['coolDownPeriodS', getU64Decoder()],
    ['lstMintDecimals', getU8Decoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): Codec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeInput<
  TAccountPayerAccount extends string = string,
  TAccountStakingPoolAccount extends string = string,
  TAccountLstMintAccount extends string = string,
  TAccountStakeTokenMintAccount extends string = string,
  TAccountUpdateAuthorityAccount extends string = string,
  TAccountSystemProgramAccount extends string = string,
  TAccountTokenProgramAccount extends string = string,
> = {
  payerAccount: TransactionSigner<TAccountPayerAccount>;
  stakingPoolAccount: Address<TAccountStakingPoolAccount>;
  lstMintAccount: Address<TAccountLstMintAccount>;
  stakeTokenMintAccount: Address<TAccountStakeTokenMintAccount>;
  updateAuthorityAccount: Address<TAccountUpdateAuthorityAccount>;
  systemProgramAccount: Address<TAccountSystemProgramAccount>;
  tokenProgramAccount: Address<TAccountTokenProgramAccount>;
  windUpPeriodS: InitializeInstructionDataArgs['windUpPeriodS'];
  coolDownPeriodS: InitializeInstructionDataArgs['coolDownPeriodS'];
  lstMintDecimals: InitializeInstructionDataArgs['lstMintDecimals'];
};

export function getInitializeInstruction<
  TAccountPayerAccount extends string,
  TAccountStakingPoolAccount extends string,
  TAccountLstMintAccount extends string,
  TAccountStakeTokenMintAccount extends string,
  TAccountUpdateAuthorityAccount extends string,
  TAccountSystemProgramAccount extends string,
  TAccountTokenProgramAccount extends string,
  TProgramAddress extends
    Address = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountPayerAccount,
    TAccountStakingPoolAccount,
    TAccountLstMintAccount,
    TAccountStakeTokenMintAccount,
    TAccountUpdateAuthorityAccount,
    TAccountSystemProgramAccount,
    TAccountTokenProgramAccount
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountPayerAccount,
  TAccountStakingPoolAccount,
  TAccountLstMintAccount,
  TAccountStakeTokenMintAccount,
  TAccountUpdateAuthorityAccount,
  TAccountSystemProgramAccount,
  TAccountTokenProgramAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payerAccount: { value: input.payerAccount ?? null, isWritable: true },
    stakingPoolAccount: {
      value: input.stakingPoolAccount ?? null,
      isWritable: true,
    },
    lstMintAccount: { value: input.lstMintAccount ?? null, isWritable: false },
    stakeTokenMintAccount: {
      value: input.stakeTokenMintAccount ?? null,
      isWritable: false,
    },
    updateAuthorityAccount: {
      value: input.updateAuthorityAccount ?? null,
      isWritable: false,
    },
    systemProgramAccount: {
      value: input.systemProgramAccount ?? null,
      isWritable: false,
    },
    tokenProgramAccount: {
      value: input.tokenProgramAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payerAccount),
      getAccountMeta(accounts.stakingPoolAccount),
      getAccountMeta(accounts.lstMintAccount),
      getAccountMeta(accounts.stakeTokenMintAccount),
      getAccountMeta(accounts.updateAuthorityAccount),
      getAccountMeta(accounts.systemProgramAccount),
      getAccountMeta(accounts.tokenProgramAccount),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountPayerAccount,
    TAccountStakingPoolAccount,
    TAccountLstMintAccount,
    TAccountStakeTokenMintAccount,
    TAccountUpdateAuthorityAccount,
    TAccountSystemProgramAccount,
    TAccountTokenProgramAccount
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payerAccount: TAccountMetas[0];
    stakingPoolAccount: TAccountMetas[1];
    lstMintAccount: TAccountMetas[2];
    stakeTokenMintAccount: TAccountMetas[3];
    updateAuthorityAccount: TAccountMetas[4];
    systemProgramAccount: TAccountMetas[5];
    tokenProgramAccount: TAccountMetas[6];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payerAccount: getNextAccount(),
      stakingPoolAccount: getNextAccount(),
      lstMintAccount: getNextAccount(),
      stakeTokenMintAccount: getNextAccount(),
      updateAuthorityAccount: getNextAccount(),
      systemProgramAccount: getNextAccount(),
      tokenProgramAccount: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
