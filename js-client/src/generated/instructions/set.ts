/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getStateUpdateInstructionDecoder,
  getStateUpdateInstructionEncoder,
  type StateUpdateInstruction,
  type StateUpdateInstructionArgs,
} from '../types';

export const SET_DISCRIMINATOR = 4;

export function getSetDiscriminatorBytes() {
  return getU8Encoder().encode(SET_DISCRIMINATOR);
}

export type SetInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountUpdateAuthorityAccount extends string | IAccountMeta<string> = string,
  TAccountStateAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUpdateAuthorityAccount extends string
        ? WritableSignerAccount<TAccountUpdateAuthorityAccount> &
            IAccountSignerMeta<TAccountUpdateAuthorityAccount>
        : TAccountUpdateAuthorityAccount,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      ...TRemainingAccounts,
    ]
  >;

export type SetInstructionData = {
  discriminator: number;
  instructionData: StateUpdateInstruction;
};

export type SetInstructionDataArgs = {
  instructionData: StateUpdateInstructionArgs;
};

export function getSetInstructionDataEncoder(): Encoder<SetInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['instructionData', getStateUpdateInstructionEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_DISCRIMINATOR })
  );
}

export function getSetInstructionDataDecoder(): Decoder<SetInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['instructionData', getStateUpdateInstructionDecoder()],
  ]);
}

export function getSetInstructionDataCodec(): Codec<SetInstructionDataArgs, SetInstructionData> {
  return combineCodec(getSetInstructionDataEncoder(), getSetInstructionDataDecoder());
}

export type SetInput<
  TAccountUpdateAuthorityAccount extends string = string,
  TAccountStateAccount extends string = string,
> = {
  updateAuthorityAccount: TransactionSigner<TAccountUpdateAuthorityAccount>;
  stateAccount: Address<TAccountStateAccount>;
  instructionData: SetInstructionDataArgs['instructionData'];
};

export function getSetInstruction<
  TAccountUpdateAuthorityAccount extends string,
  TAccountStateAccount extends string,
  TProgramAddress extends Address = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: SetInput<TAccountUpdateAuthorityAccount, TAccountStateAccount>,
  config?: { programAddress?: TProgramAddress }
): SetInstruction<TProgramAddress, TAccountUpdateAuthorityAccount, TAccountStateAccount> {
  // Program address.
  const programAddress = config?.programAddress ?? XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    updateAuthorityAccount: {
      value: input.updateAuthorityAccount ?? null,
      isWritable: true,
    },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.updateAuthorityAccount),
      getAccountMeta(accounts.stateAccount),
    ],
    programAddress,
    data: getSetInstructionDataEncoder().encode(args as SetInstructionDataArgs),
  } as SetInstruction<TProgramAddress, TAccountUpdateAuthorityAccount, TAccountStateAccount>;

  return instruction;
}

export type ParsedSetInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    updateAuthorityAccount: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
  };
  data: SetInstructionData;
};

export function parseSetInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      updateAuthorityAccount: getNextAccount(),
      stateAccount: getNextAccount(),
    },
    data: getSetInstructionDataDecoder().decode(instruction.data),
  };
}
