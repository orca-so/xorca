/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
} from "@solana/kit";
import { XORCA_PROGRAM_ADDRESS } from "../programs";

export const STAKING_POOL_INITIALIZE_DISCRIMINATOR = 0;

export function getStakingPoolInitializeDiscriminatorBytes() {
  return getU8Encoder().encode(STAKING_POOL_INITIALIZE_DISCRIMINATOR);
}

export type StakingPoolInitializeInstruction<
  TProgram extends string = typeof XORCA_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type StakingPoolInitializeInstructionData = { discriminator: number };

export type StakingPoolInitializeInstructionDataArgs = {};

export function getStakingPoolInitializeInstructionDataEncoder(): Encoder<StakingPoolInitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: STAKING_POOL_INITIALIZE_DISCRIMINATOR,
    }),
  );
}

export function getStakingPoolInitializeInstructionDataDecoder(): Decoder<StakingPoolInitializeInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getStakingPoolInitializeInstructionDataCodec(): Codec<
  StakingPoolInitializeInstructionDataArgs,
  StakingPoolInitializeInstructionData
> {
  return combineCodec(
    getStakingPoolInitializeInstructionDataEncoder(),
    getStakingPoolInitializeInstructionDataDecoder(),
  );
}

export type StakingPoolInitializeInput = {};

export function getStakingPoolInitializeInstruction<
  TProgramAddress extends Address = typeof XORCA_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): StakingPoolInitializeInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? XORCA_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getStakingPoolInitializeInstructionDataEncoder().encode({}),
  } as StakingPoolInitializeInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedStakingPoolInitializeInstruction<
  TProgram extends string = typeof XORCA_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: StakingPoolInitializeInstructionData;
};

export function parseStakingPoolInitializeInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>,
): ParsedStakingPoolInitializeInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getStakingPoolInitializeInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
