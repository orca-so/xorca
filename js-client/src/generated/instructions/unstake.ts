/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UNSTAKE_DISCRIMINATOR = 1;

export function getUnstakeDiscriminatorBytes() {
  return getU8Encoder().encode(UNSTAKE_DISCRIMINATOR);
}

export type UnstakeInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountUnstakerAccount extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountPendingWithdrawAccount extends string | AccountMeta<string> = string,
  TAccountUnstakerXorcaAta extends string | AccountMeta<string> = string,
  TAccountXorcaMintAccount extends string | AccountMeta<string> = string,
  TAccountOrcaMintAccount extends string | AccountMeta<string> = string,
  TAccountVaultAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgramAccount extends string | AccountMeta<string> = string,
  TAccountSplTokenProgramAccount extends string | AccountMeta<string> = string,
  TAccountToken2022ProgramAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUnstakerAccount extends string
        ? WritableSignerAccount<TAccountUnstakerAccount> &
            AccountSignerMeta<TAccountUnstakerAccount>
        : TAccountUnstakerAccount,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountPendingWithdrawAccount extends string
        ? WritableAccount<TAccountPendingWithdrawAccount>
        : TAccountPendingWithdrawAccount,
      TAccountUnstakerXorcaAta extends string
        ? WritableAccount<TAccountUnstakerXorcaAta>
        : TAccountUnstakerXorcaAta,
      TAccountXorcaMintAccount extends string
        ? WritableAccount<TAccountXorcaMintAccount>
        : TAccountXorcaMintAccount,
      TAccountOrcaMintAccount extends string
        ? ReadonlyAccount<TAccountOrcaMintAccount>
        : TAccountOrcaMintAccount,
      TAccountVaultAccount extends string
        ? ReadonlyAccount<TAccountVaultAccount>
        : TAccountVaultAccount,
      TAccountSystemProgramAccount extends string
        ? ReadonlyAccount<TAccountSystemProgramAccount>
        : TAccountSystemProgramAccount,
      TAccountSplTokenProgramAccount extends string
        ? ReadonlyAccount<TAccountSplTokenProgramAccount>
        : TAccountSplTokenProgramAccount,
      TAccountToken2022ProgramAccount extends string
        ? ReadonlyAccount<TAccountToken2022ProgramAccount>
        : TAccountToken2022ProgramAccount,
      ...TRemainingAccounts,
    ]
  >;

export type UnstakeInstructionData = {
  discriminator: number;
  xorcaUnstakeAmount: bigint;
  withdrawIndex: number;
};

export type UnstakeInstructionDataArgs = {
  xorcaUnstakeAmount: number | bigint;
  withdrawIndex: number;
};

export function getUnstakeInstructionDataEncoder(): FixedSizeEncoder<UnstakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['xorcaUnstakeAmount', getU64Encoder()],
      ['withdrawIndex', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UNSTAKE_DISCRIMINATOR })
  );
}

export function getUnstakeInstructionDataDecoder(): FixedSizeDecoder<UnstakeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['xorcaUnstakeAmount', getU64Decoder()],
    ['withdrawIndex', getU8Decoder()],
  ]);
}

export function getUnstakeInstructionDataCodec(): FixedSizeCodec<
  UnstakeInstructionDataArgs,
  UnstakeInstructionData
> {
  return combineCodec(getUnstakeInstructionDataEncoder(), getUnstakeInstructionDataDecoder());
}

export type UnstakeInput<
  TAccountUnstakerAccount extends string = string,
  TAccountStateAccount extends string = string,
  TAccountPendingWithdrawAccount extends string = string,
  TAccountUnstakerXorcaAta extends string = string,
  TAccountXorcaMintAccount extends string = string,
  TAccountOrcaMintAccount extends string = string,
  TAccountVaultAccount extends string = string,
  TAccountSystemProgramAccount extends string = string,
  TAccountSplTokenProgramAccount extends string = string,
  TAccountToken2022ProgramAccount extends string = string,
> = {
  unstakerAccount: TransactionSigner<TAccountUnstakerAccount>;
  stateAccount: Address<TAccountStateAccount>;
  pendingWithdrawAccount: Address<TAccountPendingWithdrawAccount>;
  unstakerXorcaAta: Address<TAccountUnstakerXorcaAta>;
  xorcaMintAccount: Address<TAccountXorcaMintAccount>;
  orcaMintAccount: Address<TAccountOrcaMintAccount>;
  vaultAccount: Address<TAccountVaultAccount>;
  systemProgramAccount: Address<TAccountSystemProgramAccount>;
  splTokenProgramAccount: Address<TAccountSplTokenProgramAccount>;
  token2022ProgramAccount: Address<TAccountToken2022ProgramAccount>;
  xorcaUnstakeAmount: UnstakeInstructionDataArgs['xorcaUnstakeAmount'];
  withdrawIndex: UnstakeInstructionDataArgs['withdrawIndex'];
};

export function getUnstakeInstruction<
  TAccountUnstakerAccount extends string,
  TAccountStateAccount extends string,
  TAccountPendingWithdrawAccount extends string,
  TAccountUnstakerXorcaAta extends string,
  TAccountXorcaMintAccount extends string,
  TAccountOrcaMintAccount extends string,
  TAccountVaultAccount extends string,
  TAccountSystemProgramAccount extends string,
  TAccountSplTokenProgramAccount extends string,
  TAccountToken2022ProgramAccount extends string,
  TProgramAddress extends Address = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: UnstakeInput<
    TAccountUnstakerAccount,
    TAccountStateAccount,
    TAccountPendingWithdrawAccount,
    TAccountUnstakerXorcaAta,
    TAccountXorcaMintAccount,
    TAccountOrcaMintAccount,
    TAccountVaultAccount,
    TAccountSystemProgramAccount,
    TAccountSplTokenProgramAccount,
    TAccountToken2022ProgramAccount
  >,
  config?: { programAddress?: TProgramAddress }
): UnstakeInstruction<
  TProgramAddress,
  TAccountUnstakerAccount,
  TAccountStateAccount,
  TAccountPendingWithdrawAccount,
  TAccountUnstakerXorcaAta,
  TAccountXorcaMintAccount,
  TAccountOrcaMintAccount,
  TAccountVaultAccount,
  TAccountSystemProgramAccount,
  TAccountSplTokenProgramAccount,
  TAccountToken2022ProgramAccount
> {
  // Program address.
  const programAddress = config?.programAddress ?? XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    unstakerAccount: { value: input.unstakerAccount ?? null, isWritable: true },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    pendingWithdrawAccount: {
      value: input.pendingWithdrawAccount ?? null,
      isWritable: true,
    },
    unstakerXorcaAta: {
      value: input.unstakerXorcaAta ?? null,
      isWritable: true,
    },
    xorcaMintAccount: {
      value: input.xorcaMintAccount ?? null,
      isWritable: true,
    },
    orcaMintAccount: {
      value: input.orcaMintAccount ?? null,
      isWritable: false,
    },
    vaultAccount: { value: input.vaultAccount ?? null, isWritable: false },
    systemProgramAccount: {
      value: input.systemProgramAccount ?? null,
      isWritable: false,
    },
    splTokenProgramAccount: {
      value: input.splTokenProgramAccount ?? null,
      isWritable: false,
    },
    token2022ProgramAccount: {
      value: input.token2022ProgramAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.unstakerAccount),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.pendingWithdrawAccount),
      getAccountMeta(accounts.unstakerXorcaAta),
      getAccountMeta(accounts.xorcaMintAccount),
      getAccountMeta(accounts.orcaMintAccount),
      getAccountMeta(accounts.vaultAccount),
      getAccountMeta(accounts.systemProgramAccount),
      getAccountMeta(accounts.splTokenProgramAccount),
      getAccountMeta(accounts.token2022ProgramAccount),
    ],
    data: getUnstakeInstructionDataEncoder().encode(args as UnstakeInstructionDataArgs),
    programAddress,
  } as UnstakeInstruction<
    TProgramAddress,
    TAccountUnstakerAccount,
    TAccountStateAccount,
    TAccountPendingWithdrawAccount,
    TAccountUnstakerXorcaAta,
    TAccountXorcaMintAccount,
    TAccountOrcaMintAccount,
    TAccountVaultAccount,
    TAccountSystemProgramAccount,
    TAccountSplTokenProgramAccount,
    TAccountToken2022ProgramAccount
  >);
}

export type ParsedUnstakeInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    unstakerAccount: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    pendingWithdrawAccount: TAccountMetas[2];
    unstakerXorcaAta: TAccountMetas[3];
    xorcaMintAccount: TAccountMetas[4];
    orcaMintAccount: TAccountMetas[5];
    vaultAccount: TAccountMetas[6];
    systemProgramAccount: TAccountMetas[7];
    splTokenProgramAccount: TAccountMetas[8];
    token2022ProgramAccount: TAccountMetas[9];
  };
  data: UnstakeInstructionData;
};

export function parseUnstakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUnstakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      unstakerAccount: getNextAccount(),
      stateAccount: getNextAccount(),
      pendingWithdrawAccount: getNextAccount(),
      unstakerXorcaAta: getNextAccount(),
      xorcaMintAccount: getNextAccount(),
      orcaMintAccount: getNextAccount(),
      vaultAccount: getNextAccount(),
      systemProgramAccount: getNextAccount(),
      splTokenProgramAccount: getNextAccount(),
      token2022ProgramAccount: getNextAccount(),
    },
    data: getUnstakeInstructionDataDecoder().decode(instruction.data),
  };
}
