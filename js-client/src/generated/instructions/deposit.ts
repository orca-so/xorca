/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
} from "@solana/kit";
import { XORCA_PROGRAM_ADDRESS } from "../programs";

export const DEPOSIT_DISCRIMINATOR = 1;

export function getDepositDiscriminatorBytes() {
  return getU8Encoder().encode(DEPOSIT_DISCRIMINATOR);
}

export type DepositInstruction<
  TProgram extends string = typeof XORCA_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type DepositInstructionData = { discriminator: number; amount: bigint };

export type DepositInstructionDataArgs = { amount: number | bigint };

export function getDepositInstructionDataEncoder(): Encoder<DepositInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPOSIT_DISCRIMINATOR }),
  );
}

export function getDepositInstructionDataDecoder(): Decoder<DepositInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["amount", getU64Decoder()],
  ]);
}

export function getDepositInstructionDataCodec(): Codec<
  DepositInstructionDataArgs,
  DepositInstructionData
> {
  return combineCodec(
    getDepositInstructionDataEncoder(),
    getDepositInstructionDataDecoder(),
  );
}

export type DepositInput = {
  amount: DepositInstructionDataArgs["amount"];
};

export function getDepositInstruction<
  TProgramAddress extends Address = typeof XORCA_PROGRAM_ADDRESS,
>(
  input: DepositInput,
  config?: { programAddress?: TProgramAddress },
): DepositInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? XORCA_PROGRAM_ADDRESS;

  // Original args.
  const args = { ...input };

  const instruction = {
    programAddress,
    data: getDepositInstructionDataEncoder().encode(
      args as DepositInstructionDataArgs,
    ),
  } as DepositInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedDepositInstruction<
  TProgram extends string = typeof XORCA_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: DepositInstructionData;
};

export function parseDepositInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>,
): ParsedDepositInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getDepositInstructionDataDecoder().decode(instruction.data),
  };
}
