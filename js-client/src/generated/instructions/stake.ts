/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const STAKE_DISCRIMINATOR = 0;

export function getStakeDiscriminatorBytes() {
  return getU8Encoder().encode(STAKE_DISCRIMINATOR);
}

export type StakeInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountStakerAccount extends string | IAccountMeta<string> = string,
  TAccountStakingPoolAccount extends string | IAccountMeta<string> = string,
  TAccountStakingPoolStakeTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountPendingClaimAccount extends string | IAccountMeta<string> = string,
  TAccountStakerStakeTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountStakeTokenMintAccount extends string | IAccountMeta<string> = string,
  TAccountSystemProgramAccount extends string | IAccountMeta<string> = string,
  TAccountTokenProgramAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakerAccount extends string
        ? WritableSignerAccount<TAccountStakerAccount> &
            IAccountSignerMeta<TAccountStakerAccount>
        : TAccountStakerAccount,
      TAccountStakingPoolAccount extends string
        ? WritableAccount<TAccountStakingPoolAccount>
        : TAccountStakingPoolAccount,
      TAccountStakingPoolStakeTokenAccount extends string
        ? WritableAccount<TAccountStakingPoolStakeTokenAccount>
        : TAccountStakingPoolStakeTokenAccount,
      TAccountPendingClaimAccount extends string
        ? WritableAccount<TAccountPendingClaimAccount>
        : TAccountPendingClaimAccount,
      TAccountStakerStakeTokenAccount extends string
        ? WritableAccount<TAccountStakerStakeTokenAccount>
        : TAccountStakerStakeTokenAccount,
      TAccountStakeTokenMintAccount extends string
        ? ReadonlyAccount<TAccountStakeTokenMintAccount>
        : TAccountStakeTokenMintAccount,
      TAccountSystemProgramAccount extends string
        ? ReadonlyAccount<TAccountSystemProgramAccount>
        : TAccountSystemProgramAccount,
      TAccountTokenProgramAccount extends string
        ? ReadonlyAccount<TAccountTokenProgramAccount>
        : TAccountTokenProgramAccount,
      ...TRemainingAccounts,
    ]
  >;

export type StakeInstructionData = {
  discriminator: number;
  stakeAmount: bigint;
  claimIndex: number;
};

export type StakeInstructionDataArgs = {
  stakeAmount: number | bigint;
  claimIndex: number;
};

export function getStakeInstructionDataEncoder(): Encoder<StakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['stakeAmount', getU64Encoder()],
      ['claimIndex', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STAKE_DISCRIMINATOR })
  );
}

export function getStakeInstructionDataDecoder(): Decoder<StakeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['stakeAmount', getU64Decoder()],
    ['claimIndex', getU8Decoder()],
  ]);
}

export function getStakeInstructionDataCodec(): Codec<
  StakeInstructionDataArgs,
  StakeInstructionData
> {
  return combineCodec(
    getStakeInstructionDataEncoder(),
    getStakeInstructionDataDecoder()
  );
}

export type StakeInput<
  TAccountStakerAccount extends string = string,
  TAccountStakingPoolAccount extends string = string,
  TAccountStakingPoolStakeTokenAccount extends string = string,
  TAccountPendingClaimAccount extends string = string,
  TAccountStakerStakeTokenAccount extends string = string,
  TAccountStakeTokenMintAccount extends string = string,
  TAccountSystemProgramAccount extends string = string,
  TAccountTokenProgramAccount extends string = string,
> = {
  stakerAccount: TransactionSigner<TAccountStakerAccount>;
  stakingPoolAccount: Address<TAccountStakingPoolAccount>;
  stakingPoolStakeTokenAccount: Address<TAccountStakingPoolStakeTokenAccount>;
  pendingClaimAccount: Address<TAccountPendingClaimAccount>;
  stakerStakeTokenAccount: Address<TAccountStakerStakeTokenAccount>;
  stakeTokenMintAccount: Address<TAccountStakeTokenMintAccount>;
  systemProgramAccount: Address<TAccountSystemProgramAccount>;
  tokenProgramAccount: Address<TAccountTokenProgramAccount>;
  stakeAmount: StakeInstructionDataArgs['stakeAmount'];
  claimIndex: StakeInstructionDataArgs['claimIndex'];
};

export function getStakeInstruction<
  TAccountStakerAccount extends string,
  TAccountStakingPoolAccount extends string,
  TAccountStakingPoolStakeTokenAccount extends string,
  TAccountPendingClaimAccount extends string,
  TAccountStakerStakeTokenAccount extends string,
  TAccountStakeTokenMintAccount extends string,
  TAccountSystemProgramAccount extends string,
  TAccountTokenProgramAccount extends string,
  TProgramAddress extends
    Address = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: StakeInput<
    TAccountStakerAccount,
    TAccountStakingPoolAccount,
    TAccountStakingPoolStakeTokenAccount,
    TAccountPendingClaimAccount,
    TAccountStakerStakeTokenAccount,
    TAccountStakeTokenMintAccount,
    TAccountSystemProgramAccount,
    TAccountTokenProgramAccount
  >,
  config?: { programAddress?: TProgramAddress }
): StakeInstruction<
  TProgramAddress,
  TAccountStakerAccount,
  TAccountStakingPoolAccount,
  TAccountStakingPoolStakeTokenAccount,
  TAccountPendingClaimAccount,
  TAccountStakerStakeTokenAccount,
  TAccountStakeTokenMintAccount,
  TAccountSystemProgramAccount,
  TAccountTokenProgramAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakerAccount: { value: input.stakerAccount ?? null, isWritable: true },
    stakingPoolAccount: {
      value: input.stakingPoolAccount ?? null,
      isWritable: true,
    },
    stakingPoolStakeTokenAccount: {
      value: input.stakingPoolStakeTokenAccount ?? null,
      isWritable: true,
    },
    pendingClaimAccount: {
      value: input.pendingClaimAccount ?? null,
      isWritable: true,
    },
    stakerStakeTokenAccount: {
      value: input.stakerStakeTokenAccount ?? null,
      isWritable: true,
    },
    stakeTokenMintAccount: {
      value: input.stakeTokenMintAccount ?? null,
      isWritable: false,
    },
    systemProgramAccount: {
      value: input.systemProgramAccount ?? null,
      isWritable: false,
    },
    tokenProgramAccount: {
      value: input.tokenProgramAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakerAccount),
      getAccountMeta(accounts.stakingPoolAccount),
      getAccountMeta(accounts.stakingPoolStakeTokenAccount),
      getAccountMeta(accounts.pendingClaimAccount),
      getAccountMeta(accounts.stakerStakeTokenAccount),
      getAccountMeta(accounts.stakeTokenMintAccount),
      getAccountMeta(accounts.systemProgramAccount),
      getAccountMeta(accounts.tokenProgramAccount),
    ],
    programAddress,
    data: getStakeInstructionDataEncoder().encode(
      args as StakeInstructionDataArgs
    ),
  } as StakeInstruction<
    TProgramAddress,
    TAccountStakerAccount,
    TAccountStakingPoolAccount,
    TAccountStakingPoolStakeTokenAccount,
    TAccountPendingClaimAccount,
    TAccountStakerStakeTokenAccount,
    TAccountStakeTokenMintAccount,
    TAccountSystemProgramAccount,
    TAccountTokenProgramAccount
  >;

  return instruction;
}

export type ParsedStakeInstruction<
  TProgram extends string = typeof XORCA_STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakerAccount: TAccountMetas[0];
    stakingPoolAccount: TAccountMetas[1];
    stakingPoolStakeTokenAccount: TAccountMetas[2];
    pendingClaimAccount: TAccountMetas[3];
    stakerStakeTokenAccount: TAccountMetas[4];
    stakeTokenMintAccount: TAccountMetas[5];
    systemProgramAccount: TAccountMetas[6];
    tokenProgramAccount: TAccountMetas[7];
  };
  data: StakeInstructionData;
};

export function parseStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakerAccount: getNextAccount(),
      stakingPoolAccount: getNextAccount(),
      stakingPoolStakeTokenAccount: getNextAccount(),
      pendingClaimAccount: getNextAccount(),
      stakerStakeTokenAccount: getNextAccount(),
      stakeTokenMintAccount: getNextAccount(),
      systemProgramAccount: getNextAccount(),
      tokenProgramAccount: getNextAccount(),
    },
    data: getStakeInstructionDataDecoder().decode(instruction.data),
  };
}
