/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from "@solana/kit";
import {
  AccountDiscriminator,
  getAccountDiscriminatorDecoder,
  getAccountDiscriminatorEncoder,
} from "../types";

export const STAKING_POOL_DISCRIMINATOR = AccountDiscriminator.StakingPool;

export function getStakingPoolDiscriminatorBytes() {
  return getAccountDiscriminatorEncoder().encode(STAKING_POOL_DISCRIMINATOR);
}

export type StakingPool = { discriminator: AccountDiscriminator };

export type StakingPoolArgs = {};

export function getStakingPoolEncoder(): Encoder<StakingPoolArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getAccountDiscriminatorEncoder()]]),
    (value) => ({ ...value, discriminator: STAKING_POOL_DISCRIMINATOR }),
  );
}

export function getStakingPoolDecoder(): Decoder<StakingPool> {
  return getStructDecoder([
    ["discriminator", getAccountDiscriminatorDecoder()],
  ]);
}

export function getStakingPoolCodec(): Codec<StakingPoolArgs, StakingPool> {
  return combineCodec(getStakingPoolEncoder(), getStakingPoolDecoder());
}

export function decodeStakingPool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<StakingPool, TAddress>;
export function decodeStakingPool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<StakingPool, TAddress>;
export function decodeStakingPool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<StakingPool, TAddress> | MaybeAccount<StakingPool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakingPoolDecoder(),
  );
}

export async function fetchStakingPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<StakingPool, TAddress>> {
  const maybeAccount = await fetchMaybeStakingPool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakingPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<StakingPool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakingPool(maybeAccount);
}

export async function fetchAllStakingPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<StakingPool>[]> {
  const maybeAccounts = await fetchAllMaybeStakingPool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakingPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<StakingPool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeStakingPool(maybeAccount));
}

export function getStakingPoolSize(): number {
  return 1;
}
