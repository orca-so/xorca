/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import {
  AccountDiscriminator,
  getAccountDiscriminatorDecoder,
  getAccountDiscriminatorEncoder,
} from '../types';

export const PENDING_CLAIM_DISCRIMINATOR = AccountDiscriminator.PendingClaim;

export function getPendingClaimDiscriminatorBytes() {
  return getAccountDiscriminatorEncoder().encode(PENDING_CLAIM_DISCRIMINATOR);
}

export type PendingClaim = {
  discriminator: AccountDiscriminator;
  stakeAmount: bigint;
  claimableTimestamp: bigint;
};

export type PendingClaimArgs = {
  stakeAmount: number | bigint;
  claimableTimestamp: number | bigint;
};

export function getPendingClaimEncoder(): Encoder<PendingClaimArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getAccountDiscriminatorEncoder()],
      ['stakeAmount', getU64Encoder()],
      ['claimableTimestamp', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PENDING_CLAIM_DISCRIMINATOR })
  );
}

export function getPendingClaimDecoder(): Decoder<PendingClaim> {
  return getStructDecoder([
    ['discriminator', getAccountDiscriminatorDecoder()],
    ['stakeAmount', getU64Decoder()],
    ['claimableTimestamp', getI64Decoder()],
  ]);
}

export function getPendingClaimCodec(): Codec<PendingClaimArgs, PendingClaim> {
  return combineCodec(getPendingClaimEncoder(), getPendingClaimDecoder());
}

export function decodePendingClaim<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PendingClaim, TAddress>;
export function decodePendingClaim<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PendingClaim, TAddress>;
export function decodePendingClaim<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PendingClaim, TAddress> | MaybeAccount<PendingClaim, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPendingClaimDecoder()
  );
}

export async function fetchPendingClaim<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PendingClaim, TAddress>> {
  const maybeAccount = await fetchMaybePendingClaim(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePendingClaim<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PendingClaim, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePendingClaim(maybeAccount);
}

export async function fetchAllPendingClaim(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PendingClaim>[]> {
  const maybeAccounts = await fetchAllMaybePendingClaim(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePendingClaim(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PendingClaim>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePendingClaim(maybeAccount));
}

export function getPendingClaimSize(): number {
  return 17;
}
