/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import {
  AccountDiscriminator,
  getAccountDiscriminatorDecoder,
  getAccountDiscriminatorEncoder,
} from '../types';

export const PENDING_WITHDRAW_DISCRIMINATOR =
  AccountDiscriminator.PendingWithdraw;

export function getPendingWithdrawDiscriminatorBytes() {
  return getAccountDiscriminatorEncoder().encode(
    PENDING_WITHDRAW_DISCRIMINATOR
  );
}

export type PendingWithdraw = {
  discriminator: AccountDiscriminator;
  withdrawableStakeAmount: bigint;
  withdrawableTimestamp: bigint;
};

export type PendingWithdrawArgs = {
  withdrawableStakeAmount: number | bigint;
  withdrawableTimestamp: number | bigint;
};

export function getPendingWithdrawEncoder(): Encoder<PendingWithdrawArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getAccountDiscriminatorEncoder()],
      ['withdrawableStakeAmount', getU64Encoder()],
      ['withdrawableTimestamp', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PENDING_WITHDRAW_DISCRIMINATOR })
  );
}

export function getPendingWithdrawDecoder(): Decoder<PendingWithdraw> {
  return getStructDecoder([
    ['discriminator', getAccountDiscriminatorDecoder()],
    ['withdrawableStakeAmount', getU64Decoder()],
    ['withdrawableTimestamp', getI64Decoder()],
  ]);
}

export function getPendingWithdrawCodec(): Codec<
  PendingWithdrawArgs,
  PendingWithdraw
> {
  return combineCodec(getPendingWithdrawEncoder(), getPendingWithdrawDecoder());
}

export function decodePendingWithdraw<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PendingWithdraw, TAddress>;
export function decodePendingWithdraw<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PendingWithdraw, TAddress>;
export function decodePendingWithdraw<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<PendingWithdraw, TAddress>
  | MaybeAccount<PendingWithdraw, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPendingWithdrawDecoder()
  );
}

export async function fetchPendingWithdraw<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PendingWithdraw, TAddress>> {
  const maybeAccount = await fetchMaybePendingWithdraw(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePendingWithdraw<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PendingWithdraw, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePendingWithdraw(maybeAccount);
}

export async function fetchAllPendingWithdraw(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PendingWithdraw>[]> {
  const maybeAccounts = await fetchAllMaybePendingWithdraw(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePendingWithdraw(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PendingWithdraw>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodePendingWithdraw(maybeAccount)
  );
}

export function getPendingWithdrawSize(): number {
  return 17;
}
