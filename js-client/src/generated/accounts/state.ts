/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import {
  AccountDiscriminator,
  getAccountDiscriminatorDecoder,
  getAccountDiscriminatorEncoder,
} from '../types';

export const STATE_DISCRIMINATOR = AccountDiscriminator.State;

export function getStateDiscriminatorBytes() {
  return getAccountDiscriminatorEncoder().encode(STATE_DISCRIMINATOR);
}

export type State = {
  discriminator: AccountDiscriminator;
  escrowedOrcaAmount: bigint;
  updateAuthority: Address;
  coolDownPeriodS: bigint;
};

export type StateArgs = {
  escrowedOrcaAmount: number | bigint;
  updateAuthority: Address;
  coolDownPeriodS: number | bigint;
};

export function getStateEncoder(): Encoder<StateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getAccountDiscriminatorEncoder()],
      ['escrowedOrcaAmount', getU64Encoder()],
      ['updateAuthority', getAddressEncoder()],
      ['coolDownPeriodS', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STATE_DISCRIMINATOR })
  );
}

export function getStateDecoder(): Decoder<State> {
  return getStructDecoder([
    ['discriminator', getAccountDiscriminatorDecoder()],
    ['escrowedOrcaAmount', getU64Decoder()],
    ['updateAuthority', getAddressDecoder()],
    ['coolDownPeriodS', getU64Decoder()],
  ]);
}

export function getStateCodec(): Codec<StateArgs, State> {
  return combineCodec(getStateEncoder(), getStateDecoder());
}

export function decodeState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<State, TAddress>;
export function decodeState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<State, TAddress>;
export function decodeState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<State, TAddress> | MaybeAccount<State, TAddress> {
  return decodeAccount(encodedAccount as MaybeEncodedAccount<TAddress>, getStateDecoder());
}

export async function fetchState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<State, TAddress>> {
  const maybeAccount = await fetchMaybeState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<State, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeState(maybeAccount);
}

export async function fetchAllState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<State>[]> {
  const maybeAccounts = await fetchAllMaybeState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<State>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeState(maybeAccount));
}

export function getStateSize(): number {
  return 49;
}
