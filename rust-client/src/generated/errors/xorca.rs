//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum XorcaError {
    /// 6000 - Unknown instruction discriminator
    #[error("Unknown instruction discriminator")]
    UnknownInstructionDiscriminator = 0x1770,
    /// 6001 - Incorrect program id
    #[error("Incorrect program id")]
    IncorrectProgramId = 0x1771,
    /// 6002 - Invalid account role
    #[error("Invalid account role")]
    InvalidAccountRole = 0x1772,
    /// 6003 - Not enough account keys
    #[error("Not enough account keys")]
    NotEnoughAccountKeys = 0x1773,
    /// 6004 - Incorrect owner
    #[error("Incorrect owner")]
    IncorrectOwner = 0x1774,
    /// 6005 - Invalid seeds
    #[error("Invalid seeds")]
    InvalidSeeds = 0x1775,
    /// 6006 - Invalid account address
    #[error("Invalid account address")]
    IncorrectAccountAddress = 0x1776,
    /// 6007 - Invalid account data
    #[error("Invalid account data")]
    InvalidAccountData = 0x1777,
    /// 6008 - Arithmetic error
    #[error("Arithmetic error")]
    ArithmeticError = 0x1778,
}

impl solana_program::program_error::PrintProgramError for XorcaError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for XorcaError {
    fn type_of() -> &'static str {
        "XorcaError"
    }
}
