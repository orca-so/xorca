//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const UNSTAKE_DISCRIMINATOR: u8 = 1;

/// Accounts.
#[derive(Debug)]
pub struct Unstake {
    pub unstaker_account: solana_pubkey::Pubkey,

    pub state_account: solana_pubkey::Pubkey,

    pub vault_account: solana_pubkey::Pubkey,

    pub pending_withdraw_account: solana_pubkey::Pubkey,

    pub unstaker_xorca_ata: solana_pubkey::Pubkey,

    pub xorca_mint_account: solana_pubkey::Pubkey,

    pub orca_mint_account: solana_pubkey::Pubkey,

    pub system_program_account: solana_pubkey::Pubkey,

    pub token_program_account: solana_pubkey::Pubkey,
}

impl Unstake {
    pub fn instruction(&self, args: UnstakeInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UnstakeInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.unstaker_account,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.state_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.vault_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.pending_withdraw_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.unstaker_xorca_ata,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.xorca_mint_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.orca_mint_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&UnstakeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::XORCA_STAKING_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UnstakeInstructionData {
    discriminator: u8,
}

impl UnstakeInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 1 }
    }
}

impl Default for UnstakeInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UnstakeInstructionArgs {
    pub xorca_unstake_amount: u64,
    pub withdraw_index: u8,
}

/// Instruction builder for `Unstake`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` unstaker_account
///   1. `[writable]` state_account
///   2. `[]` vault_account
///   3. `[writable]` pending_withdraw_account
///   4. `[writable]` unstaker_xorca_ata
///   5. `[writable]` xorca_mint_account
///   6. `[]` orca_mint_account
///   7. `[]` system_program_account
///   8. `[]` token_program_account
#[derive(Clone, Debug, Default)]
pub struct UnstakeBuilder {
    unstaker_account: Option<solana_pubkey::Pubkey>,
    state_account: Option<solana_pubkey::Pubkey>,
    vault_account: Option<solana_pubkey::Pubkey>,
    pending_withdraw_account: Option<solana_pubkey::Pubkey>,
    unstaker_xorca_ata: Option<solana_pubkey::Pubkey>,
    xorca_mint_account: Option<solana_pubkey::Pubkey>,
    orca_mint_account: Option<solana_pubkey::Pubkey>,
    system_program_account: Option<solana_pubkey::Pubkey>,
    token_program_account: Option<solana_pubkey::Pubkey>,
    xorca_unstake_amount: Option<u64>,
    withdraw_index: Option<u8>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl UnstakeBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn unstaker_account(&mut self, unstaker_account: solana_pubkey::Pubkey) -> &mut Self {
        self.unstaker_account = Some(unstaker_account);
        self
    }
    #[inline(always)]
    pub fn state_account(&mut self, state_account: solana_pubkey::Pubkey) -> &mut Self {
        self.state_account = Some(state_account);
        self
    }
    #[inline(always)]
    pub fn vault_account(&mut self, vault_account: solana_pubkey::Pubkey) -> &mut Self {
        self.vault_account = Some(vault_account);
        self
    }
    #[inline(always)]
    pub fn pending_withdraw_account(
        &mut self,
        pending_withdraw_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.pending_withdraw_account = Some(pending_withdraw_account);
        self
    }
    #[inline(always)]
    pub fn unstaker_xorca_ata(&mut self, unstaker_xorca_ata: solana_pubkey::Pubkey) -> &mut Self {
        self.unstaker_xorca_ata = Some(unstaker_xorca_ata);
        self
    }
    #[inline(always)]
    pub fn xorca_mint_account(&mut self, xorca_mint_account: solana_pubkey::Pubkey) -> &mut Self {
        self.xorca_mint_account = Some(xorca_mint_account);
        self
    }
    #[inline(always)]
    pub fn orca_mint_account(&mut self, orca_mint_account: solana_pubkey::Pubkey) -> &mut Self {
        self.orca_mint_account = Some(orca_mint_account);
        self
    }
    #[inline(always)]
    pub fn system_program_account(
        &mut self,
        system_program_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.system_program_account = Some(system_program_account);
        self
    }
    #[inline(always)]
    pub fn token_program_account(
        &mut self,
        token_program_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.token_program_account = Some(token_program_account);
        self
    }
    #[inline(always)]
    pub fn xorca_unstake_amount(&mut self, xorca_unstake_amount: u64) -> &mut Self {
        self.xorca_unstake_amount = Some(xorca_unstake_amount);
        self
    }
    #[inline(always)]
    pub fn withdraw_index(&mut self, withdraw_index: u8) -> &mut Self {
        self.withdraw_index = Some(withdraw_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = Unstake {
            unstaker_account: self.unstaker_account.expect("unstaker_account is not set"),
            state_account: self.state_account.expect("state_account is not set"),
            vault_account: self.vault_account.expect("vault_account is not set"),
            pending_withdraw_account: self
                .pending_withdraw_account
                .expect("pending_withdraw_account is not set"),
            unstaker_xorca_ata: self
                .unstaker_xorca_ata
                .expect("unstaker_xorca_ata is not set"),
            xorca_mint_account: self
                .xorca_mint_account
                .expect("xorca_mint_account is not set"),
            orca_mint_account: self
                .orca_mint_account
                .expect("orca_mint_account is not set"),
            system_program_account: self
                .system_program_account
                .expect("system_program_account is not set"),
            token_program_account: self
                .token_program_account
                .expect("token_program_account is not set"),
        };
        let args = UnstakeInstructionArgs {
            xorca_unstake_amount: self
                .xorca_unstake_amount
                .clone()
                .expect("xorca_unstake_amount is not set"),
            withdraw_index: self
                .withdraw_index
                .clone()
                .expect("withdraw_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `unstake` CPI accounts.
pub struct UnstakeCpiAccounts<'a, 'b> {
    pub unstaker_account: &'b solana_account_info::AccountInfo<'a>,

    pub state_account: &'b solana_account_info::AccountInfo<'a>,

    pub vault_account: &'b solana_account_info::AccountInfo<'a>,

    pub pending_withdraw_account: &'b solana_account_info::AccountInfo<'a>,

    pub unstaker_xorca_ata: &'b solana_account_info::AccountInfo<'a>,

    pub xorca_mint_account: &'b solana_account_info::AccountInfo<'a>,

    pub orca_mint_account: &'b solana_account_info::AccountInfo<'a>,

    pub system_program_account: &'b solana_account_info::AccountInfo<'a>,

    pub token_program_account: &'b solana_account_info::AccountInfo<'a>,
}

/// `unstake` CPI instruction.
pub struct UnstakeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub unstaker_account: &'b solana_account_info::AccountInfo<'a>,

    pub state_account: &'b solana_account_info::AccountInfo<'a>,

    pub vault_account: &'b solana_account_info::AccountInfo<'a>,

    pub pending_withdraw_account: &'b solana_account_info::AccountInfo<'a>,

    pub unstaker_xorca_ata: &'b solana_account_info::AccountInfo<'a>,

    pub xorca_mint_account: &'b solana_account_info::AccountInfo<'a>,

    pub orca_mint_account: &'b solana_account_info::AccountInfo<'a>,

    pub system_program_account: &'b solana_account_info::AccountInfo<'a>,

    pub token_program_account: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UnstakeInstructionArgs,
}

impl<'a, 'b> UnstakeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: UnstakeCpiAccounts<'a, 'b>,
        args: UnstakeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            unstaker_account: accounts.unstaker_account,
            state_account: accounts.state_account,
            vault_account: accounts.vault_account,
            pending_withdraw_account: accounts.pending_withdraw_account,
            unstaker_xorca_ata: accounts.unstaker_xorca_ata,
            xorca_mint_account: accounts.xorca_mint_account,
            orca_mint_account: accounts.orca_mint_account,
            system_program_account: accounts.system_program_account,
            token_program_account: accounts.token_program_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.unstaker_account.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.state_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.vault_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pending_withdraw_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.unstaker_xorca_ata.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.xorca_mint_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.orca_mint_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&UnstakeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::XORCA_STAKING_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.unstaker_account.clone());
        account_infos.push(self.state_account.clone());
        account_infos.push(self.vault_account.clone());
        account_infos.push(self.pending_withdraw_account.clone());
        account_infos.push(self.unstaker_xorca_ata.clone());
        account_infos.push(self.xorca_mint_account.clone());
        account_infos.push(self.orca_mint_account.clone());
        account_infos.push(self.system_program_account.clone());
        account_infos.push(self.token_program_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Unstake` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` unstaker_account
///   1. `[writable]` state_account
///   2. `[]` vault_account
///   3. `[writable]` pending_withdraw_account
///   4. `[writable]` unstaker_xorca_ata
///   5. `[writable]` xorca_mint_account
///   6. `[]` orca_mint_account
///   7. `[]` system_program_account
///   8. `[]` token_program_account
#[derive(Clone, Debug)]
pub struct UnstakeCpiBuilder<'a, 'b> {
    instruction: Box<UnstakeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UnstakeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UnstakeCpiBuilderInstruction {
            __program: program,
            unstaker_account: None,
            state_account: None,
            vault_account: None,
            pending_withdraw_account: None,
            unstaker_xorca_ata: None,
            xorca_mint_account: None,
            orca_mint_account: None,
            system_program_account: None,
            token_program_account: None,
            xorca_unstake_amount: None,
            withdraw_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn unstaker_account(
        &mut self,
        unstaker_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.unstaker_account = Some(unstaker_account);
        self
    }
    #[inline(always)]
    pub fn state_account(
        &mut self,
        state_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.state_account = Some(state_account);
        self
    }
    #[inline(always)]
    pub fn vault_account(
        &mut self,
        vault_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_account = Some(vault_account);
        self
    }
    #[inline(always)]
    pub fn pending_withdraw_account(
        &mut self,
        pending_withdraw_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pending_withdraw_account = Some(pending_withdraw_account);
        self
    }
    #[inline(always)]
    pub fn unstaker_xorca_ata(
        &mut self,
        unstaker_xorca_ata: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.unstaker_xorca_ata = Some(unstaker_xorca_ata);
        self
    }
    #[inline(always)]
    pub fn xorca_mint_account(
        &mut self,
        xorca_mint_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.xorca_mint_account = Some(xorca_mint_account);
        self
    }
    #[inline(always)]
    pub fn orca_mint_account(
        &mut self,
        orca_mint_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.orca_mint_account = Some(orca_mint_account);
        self
    }
    #[inline(always)]
    pub fn system_program_account(
        &mut self,
        system_program_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program_account = Some(system_program_account);
        self
    }
    #[inline(always)]
    pub fn token_program_account(
        &mut self,
        token_program_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program_account = Some(token_program_account);
        self
    }
    #[inline(always)]
    pub fn xorca_unstake_amount(&mut self, xorca_unstake_amount: u64) -> &mut Self {
        self.instruction.xorca_unstake_amount = Some(xorca_unstake_amount);
        self
    }
    #[inline(always)]
    pub fn withdraw_index(&mut self, withdraw_index: u8) -> &mut Self {
        self.instruction.withdraw_index = Some(withdraw_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = UnstakeInstructionArgs {
            xorca_unstake_amount: self
                .instruction
                .xorca_unstake_amount
                .clone()
                .expect("xorca_unstake_amount is not set"),
            withdraw_index: self
                .instruction
                .withdraw_index
                .clone()
                .expect("withdraw_index is not set"),
        };
        let instruction = UnstakeCpi {
            __program: self.instruction.__program,

            unstaker_account: self
                .instruction
                .unstaker_account
                .expect("unstaker_account is not set"),

            state_account: self
                .instruction
                .state_account
                .expect("state_account is not set"),

            vault_account: self
                .instruction
                .vault_account
                .expect("vault_account is not set"),

            pending_withdraw_account: self
                .instruction
                .pending_withdraw_account
                .expect("pending_withdraw_account is not set"),

            unstaker_xorca_ata: self
                .instruction
                .unstaker_xorca_ata
                .expect("unstaker_xorca_ata is not set"),

            xorca_mint_account: self
                .instruction
                .xorca_mint_account
                .expect("xorca_mint_account is not set"),

            orca_mint_account: self
                .instruction
                .orca_mint_account
                .expect("orca_mint_account is not set"),

            system_program_account: self
                .instruction
                .system_program_account
                .expect("system_program_account is not set"),

            token_program_account: self
                .instruction
                .token_program_account
                .expect("token_program_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UnstakeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    unstaker_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    state_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    vault_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    pending_withdraw_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    unstaker_xorca_ata: Option<&'b solana_account_info::AccountInfo<'a>>,
    xorca_mint_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    orca_mint_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    xorca_unstake_amount: Option<u64>,
    withdraw_index: Option<u8>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
