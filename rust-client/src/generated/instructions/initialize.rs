//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct Initialize {
    pub payer_account: solana_program::pubkey::Pubkey,

    pub staking_pool_account: solana_program::pubkey::Pubkey,

    pub lst_mint_account: solana_program::pubkey::Pubkey,

    pub stake_token_mint_account: solana_program::pubkey::Pubkey,

    pub update_authority_account: solana_program::pubkey::Pubkey,

    pub system_program_account: solana_program::pubkey::Pubkey,

    pub token_program_account: solana_program::pubkey::Pubkey,
}

impl Initialize {
    pub fn instruction(
        &self,
        args: InitializeInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer_account,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.staking_pool_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lst_mint_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_token_mint_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.update_authority_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::XORCA_STAKING_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeInstructionData {
    discriminator: u8,
}

impl InitializeInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 5 }
    }
}

impl Default for InitializeInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeInstructionArgs {
    pub wind_up_period_s: u64,
    pub cool_down_period_s: u64,
    pub lst_mint_decimals: u8,
}

/// Instruction builder for `Initialize`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer_account
///   1. `[writable]` staking_pool_account
///   2. `[]` lst_mint_account
///   3. `[]` stake_token_mint_account
///   4. `[]` update_authority_account
///   5. `[]` system_program_account
///   6. `[]` token_program_account
#[derive(Clone, Debug, Default)]
pub struct InitializeBuilder {
    payer_account: Option<solana_program::pubkey::Pubkey>,
    staking_pool_account: Option<solana_program::pubkey::Pubkey>,
    lst_mint_account: Option<solana_program::pubkey::Pubkey>,
    stake_token_mint_account: Option<solana_program::pubkey::Pubkey>,
    update_authority_account: Option<solana_program::pubkey::Pubkey>,
    system_program_account: Option<solana_program::pubkey::Pubkey>,
    token_program_account: Option<solana_program::pubkey::Pubkey>,
    wind_up_period_s: Option<u64>,
    cool_down_period_s: Option<u64>,
    lst_mint_decimals: Option<u8>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn payer_account(&mut self, payer_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer_account = Some(payer_account);
        self
    }
    #[inline(always)]
    pub fn staking_pool_account(
        &mut self,
        staking_pool_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.staking_pool_account = Some(staking_pool_account);
        self
    }
    #[inline(always)]
    pub fn lst_mint_account(
        &mut self,
        lst_mint_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.lst_mint_account = Some(lst_mint_account);
        self
    }
    #[inline(always)]
    pub fn stake_token_mint_account(
        &mut self,
        stake_token_mint_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.stake_token_mint_account = Some(stake_token_mint_account);
        self
    }
    #[inline(always)]
    pub fn update_authority_account(
        &mut self,
        update_authority_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.update_authority_account = Some(update_authority_account);
        self
    }
    #[inline(always)]
    pub fn system_program_account(
        &mut self,
        system_program_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.system_program_account = Some(system_program_account);
        self
    }
    #[inline(always)]
    pub fn token_program_account(
        &mut self,
        token_program_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_program_account = Some(token_program_account);
        self
    }
    #[inline(always)]
    pub fn wind_up_period_s(&mut self, wind_up_period_s: u64) -> &mut Self {
        self.wind_up_period_s = Some(wind_up_period_s);
        self
    }
    #[inline(always)]
    pub fn cool_down_period_s(&mut self, cool_down_period_s: u64) -> &mut Self {
        self.cool_down_period_s = Some(cool_down_period_s);
        self
    }
    #[inline(always)]
    pub fn lst_mint_decimals(&mut self, lst_mint_decimals: u8) -> &mut Self {
        self.lst_mint_decimals = Some(lst_mint_decimals);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Initialize {
            payer_account: self.payer_account.expect("payer_account is not set"),
            staking_pool_account: self
                .staking_pool_account
                .expect("staking_pool_account is not set"),
            lst_mint_account: self.lst_mint_account.expect("lst_mint_account is not set"),
            stake_token_mint_account: self
                .stake_token_mint_account
                .expect("stake_token_mint_account is not set"),
            update_authority_account: self
                .update_authority_account
                .expect("update_authority_account is not set"),
            system_program_account: self
                .system_program_account
                .expect("system_program_account is not set"),
            token_program_account: self
                .token_program_account
                .expect("token_program_account is not set"),
        };
        let args = InitializeInstructionArgs {
            wind_up_period_s: self
                .wind_up_period_s
                .clone()
                .expect("wind_up_period_s is not set"),
            cool_down_period_s: self
                .cool_down_period_s
                .clone()
                .expect("cool_down_period_s is not set"),
            lst_mint_decimals: self
                .lst_mint_decimals
                .clone()
                .expect("lst_mint_decimals is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize` CPI accounts.
pub struct InitializeCpiAccounts<'a, 'b> {
    pub payer_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub staking_pool_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub lst_mint_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_token_mint_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub update_authority_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program_account: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize` CPI instruction.
pub struct InitializeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub staking_pool_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub lst_mint_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_token_mint_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub update_authority_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeInstructionArgs,
}

impl<'a, 'b> InitializeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeCpiAccounts<'a, 'b>,
        args: InitializeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer_account: accounts.payer_account,
            staking_pool_account: accounts.staking_pool_account,
            lst_mint_account: accounts.lst_mint_account,
            stake_token_mint_account: accounts.stake_token_mint_account,
            update_authority_account: accounts.update_authority_account,
            system_program_account: accounts.system_program_account,
            token_program_account: accounts.token_program_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer_account.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.staking_pool_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lst_mint_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_token_mint_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.update_authority_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::XORCA_STAKING_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer_account.clone());
        account_infos.push(self.staking_pool_account.clone());
        account_infos.push(self.lst_mint_account.clone());
        account_infos.push(self.stake_token_mint_account.clone());
        account_infos.push(self.update_authority_account.clone());
        account_infos.push(self.system_program_account.clone());
        account_infos.push(self.token_program_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Initialize` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer_account
///   1. `[writable]` staking_pool_account
///   2. `[]` lst_mint_account
///   3. `[]` stake_token_mint_account
///   4. `[]` update_authority_account
///   5. `[]` system_program_account
///   6. `[]` token_program_account
#[derive(Clone, Debug)]
pub struct InitializeCpiBuilder<'a, 'b> {
    instruction: Box<InitializeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeCpiBuilderInstruction {
            __program: program,
            payer_account: None,
            staking_pool_account: None,
            lst_mint_account: None,
            stake_token_mint_account: None,
            update_authority_account: None,
            system_program_account: None,
            token_program_account: None,
            wind_up_period_s: None,
            cool_down_period_s: None,
            lst_mint_decimals: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn payer_account(
        &mut self,
        payer_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.payer_account = Some(payer_account);
        self
    }
    #[inline(always)]
    pub fn staking_pool_account(
        &mut self,
        staking_pool_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.staking_pool_account = Some(staking_pool_account);
        self
    }
    #[inline(always)]
    pub fn lst_mint_account(
        &mut self,
        lst_mint_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lst_mint_account = Some(lst_mint_account);
        self
    }
    #[inline(always)]
    pub fn stake_token_mint_account(
        &mut self,
        stake_token_mint_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_token_mint_account = Some(stake_token_mint_account);
        self
    }
    #[inline(always)]
    pub fn update_authority_account(
        &mut self,
        update_authority_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.update_authority_account = Some(update_authority_account);
        self
    }
    #[inline(always)]
    pub fn system_program_account(
        &mut self,
        system_program_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program_account = Some(system_program_account);
        self
    }
    #[inline(always)]
    pub fn token_program_account(
        &mut self,
        token_program_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program_account = Some(token_program_account);
        self
    }
    #[inline(always)]
    pub fn wind_up_period_s(&mut self, wind_up_period_s: u64) -> &mut Self {
        self.instruction.wind_up_period_s = Some(wind_up_period_s);
        self
    }
    #[inline(always)]
    pub fn cool_down_period_s(&mut self, cool_down_period_s: u64) -> &mut Self {
        self.instruction.cool_down_period_s = Some(cool_down_period_s);
        self
    }
    #[inline(always)]
    pub fn lst_mint_decimals(&mut self, lst_mint_decimals: u8) -> &mut Self {
        self.instruction.lst_mint_decimals = Some(lst_mint_decimals);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeInstructionArgs {
            wind_up_period_s: self
                .instruction
                .wind_up_period_s
                .clone()
                .expect("wind_up_period_s is not set"),
            cool_down_period_s: self
                .instruction
                .cool_down_period_s
                .clone()
                .expect("cool_down_period_s is not set"),
            lst_mint_decimals: self
                .instruction
                .lst_mint_decimals
                .clone()
                .expect("lst_mint_decimals is not set"),
        };
        let instruction = InitializeCpi {
            __program: self.instruction.__program,

            payer_account: self
                .instruction
                .payer_account
                .expect("payer_account is not set"),

            staking_pool_account: self
                .instruction
                .staking_pool_account
                .expect("staking_pool_account is not set"),

            lst_mint_account: self
                .instruction
                .lst_mint_account
                .expect("lst_mint_account is not set"),

            stake_token_mint_account: self
                .instruction
                .stake_token_mint_account
                .expect("stake_token_mint_account is not set"),

            update_authority_account: self
                .instruction
                .update_authority_account
                .expect("update_authority_account is not set"),

            system_program_account: self
                .instruction
                .system_program_account
                .expect("system_program_account is not set"),

            token_program_account: self
                .instruction
                .token_program_account
                .expect("token_program_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    payer_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    staking_pool_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lst_mint_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_token_mint_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    update_authority_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    wind_up_period_s: Option<u64>,
    cool_down_period_s: Option<u64>,
    lst_mint_decimals: Option<u8>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
