//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct Stake {
    pub staker_account: solana_program::pubkey::Pubkey,

    pub xorca_state_account: solana_program::pubkey::Pubkey,

    pub xorca_state_orca_ata: solana_program::pubkey::Pubkey,

    pub staker_orca_ata: solana_program::pubkey::Pubkey,

    pub orca_mint_account: solana_program::pubkey::Pubkey,

    pub xorca_mint_account: solana_program::pubkey::Pubkey,

    pub system_program_account: solana_program::pubkey::Pubkey,

    pub token_program_account: solana_program::pubkey::Pubkey,
}

impl Stake {
    pub fn instruction(
        &self,
        args: StakeInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: StakeInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.staker_account,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.xorca_state_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.xorca_state_orca_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.staker_orca_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.orca_mint_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.xorca_mint_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&StakeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::XORCA_STAKING_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct StakeInstructionData {
    discriminator: u8,
}

impl StakeInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 0 }
    }
}

impl Default for StakeInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct StakeInstructionArgs {
    pub stake_amount: u64,
}

/// Instruction builder for `Stake`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` staker_account
///   1. `[writable]` xorca_state_account
///   2. `[writable]` xorca_state_orca_ata
///   3. `[writable]` staker_orca_ata
///   4. `[]` orca_mint_account
///   5. `[]` xorca_mint_account
///   6. `[]` system_program_account
///   7. `[]` token_program_account
#[derive(Clone, Debug, Default)]
pub struct StakeBuilder {
    staker_account: Option<solana_program::pubkey::Pubkey>,
    xorca_state_account: Option<solana_program::pubkey::Pubkey>,
    xorca_state_orca_ata: Option<solana_program::pubkey::Pubkey>,
    staker_orca_ata: Option<solana_program::pubkey::Pubkey>,
    orca_mint_account: Option<solana_program::pubkey::Pubkey>,
    xorca_mint_account: Option<solana_program::pubkey::Pubkey>,
    system_program_account: Option<solana_program::pubkey::Pubkey>,
    token_program_account: Option<solana_program::pubkey::Pubkey>,
    stake_amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl StakeBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn staker_account(&mut self, staker_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.staker_account = Some(staker_account);
        self
    }
    #[inline(always)]
    pub fn xorca_state_account(
        &mut self,
        xorca_state_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.xorca_state_account = Some(xorca_state_account);
        self
    }
    #[inline(always)]
    pub fn xorca_state_orca_ata(
        &mut self,
        xorca_state_orca_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.xorca_state_orca_ata = Some(xorca_state_orca_ata);
        self
    }
    #[inline(always)]
    pub fn staker_orca_ata(
        &mut self,
        staker_orca_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.staker_orca_ata = Some(staker_orca_ata);
        self
    }
    #[inline(always)]
    pub fn orca_mint_account(
        &mut self,
        orca_mint_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.orca_mint_account = Some(orca_mint_account);
        self
    }
    #[inline(always)]
    pub fn xorca_mint_account(
        &mut self,
        xorca_mint_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.xorca_mint_account = Some(xorca_mint_account);
        self
    }
    #[inline(always)]
    pub fn system_program_account(
        &mut self,
        system_program_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.system_program_account = Some(system_program_account);
        self
    }
    #[inline(always)]
    pub fn token_program_account(
        &mut self,
        token_program_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_program_account = Some(token_program_account);
        self
    }
    #[inline(always)]
    pub fn stake_amount(&mut self, stake_amount: u64) -> &mut Self {
        self.stake_amount = Some(stake_amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Stake {
            staker_account: self.staker_account.expect("staker_account is not set"),
            xorca_state_account: self
                .xorca_state_account
                .expect("xorca_state_account is not set"),
            xorca_state_orca_ata: self
                .xorca_state_orca_ata
                .expect("xorca_state_orca_ata is not set"),
            staker_orca_ata: self.staker_orca_ata.expect("staker_orca_ata is not set"),
            orca_mint_account: self
                .orca_mint_account
                .expect("orca_mint_account is not set"),
            xorca_mint_account: self
                .xorca_mint_account
                .expect("xorca_mint_account is not set"),
            system_program_account: self
                .system_program_account
                .expect("system_program_account is not set"),
            token_program_account: self
                .token_program_account
                .expect("token_program_account is not set"),
        };
        let args = StakeInstructionArgs {
            stake_amount: self.stake_amount.clone().expect("stake_amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `stake` CPI accounts.
pub struct StakeCpiAccounts<'a, 'b> {
    pub staker_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub xorca_state_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub xorca_state_orca_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub staker_orca_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub orca_mint_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub xorca_mint_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program_account: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `stake` CPI instruction.
pub struct StakeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub staker_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub xorca_state_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub xorca_state_orca_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub staker_orca_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub orca_mint_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub xorca_mint_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: StakeInstructionArgs,
}

impl<'a, 'b> StakeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: StakeCpiAccounts<'a, 'b>,
        args: StakeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            staker_account: accounts.staker_account,
            xorca_state_account: accounts.xorca_state_account,
            xorca_state_orca_ata: accounts.xorca_state_orca_ata,
            staker_orca_ata: accounts.staker_orca_ata,
            orca_mint_account: accounts.orca_mint_account,
            xorca_mint_account: accounts.xorca_mint_account,
            system_program_account: accounts.system_program_account,
            token_program_account: accounts.token_program_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.staker_account.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.xorca_state_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.xorca_state_orca_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.staker_orca_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.orca_mint_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.xorca_mint_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&StakeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::XORCA_STAKING_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.staker_account.clone());
        account_infos.push(self.xorca_state_account.clone());
        account_infos.push(self.xorca_state_orca_ata.clone());
        account_infos.push(self.staker_orca_ata.clone());
        account_infos.push(self.orca_mint_account.clone());
        account_infos.push(self.xorca_mint_account.clone());
        account_infos.push(self.system_program_account.clone());
        account_infos.push(self.token_program_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Stake` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` staker_account
///   1. `[writable]` xorca_state_account
///   2. `[writable]` xorca_state_orca_ata
///   3. `[writable]` staker_orca_ata
///   4. `[]` orca_mint_account
///   5. `[]` xorca_mint_account
///   6. `[]` system_program_account
///   7. `[]` token_program_account
#[derive(Clone, Debug)]
pub struct StakeCpiBuilder<'a, 'b> {
    instruction: Box<StakeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> StakeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(StakeCpiBuilderInstruction {
            __program: program,
            staker_account: None,
            xorca_state_account: None,
            xorca_state_orca_ata: None,
            staker_orca_ata: None,
            orca_mint_account: None,
            xorca_mint_account: None,
            system_program_account: None,
            token_program_account: None,
            stake_amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn staker_account(
        &mut self,
        staker_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.staker_account = Some(staker_account);
        self
    }
    #[inline(always)]
    pub fn xorca_state_account(
        &mut self,
        xorca_state_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.xorca_state_account = Some(xorca_state_account);
        self
    }
    #[inline(always)]
    pub fn xorca_state_orca_ata(
        &mut self,
        xorca_state_orca_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.xorca_state_orca_ata = Some(xorca_state_orca_ata);
        self
    }
    #[inline(always)]
    pub fn staker_orca_ata(
        &mut self,
        staker_orca_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.staker_orca_ata = Some(staker_orca_ata);
        self
    }
    #[inline(always)]
    pub fn orca_mint_account(
        &mut self,
        orca_mint_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.orca_mint_account = Some(orca_mint_account);
        self
    }
    #[inline(always)]
    pub fn xorca_mint_account(
        &mut self,
        xorca_mint_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.xorca_mint_account = Some(xorca_mint_account);
        self
    }
    #[inline(always)]
    pub fn system_program_account(
        &mut self,
        system_program_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program_account = Some(system_program_account);
        self
    }
    #[inline(always)]
    pub fn token_program_account(
        &mut self,
        token_program_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program_account = Some(token_program_account);
        self
    }
    #[inline(always)]
    pub fn stake_amount(&mut self, stake_amount: u64) -> &mut Self {
        self.instruction.stake_amount = Some(stake_amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = StakeInstructionArgs {
            stake_amount: self
                .instruction
                .stake_amount
                .clone()
                .expect("stake_amount is not set"),
        };
        let instruction = StakeCpi {
            __program: self.instruction.__program,

            staker_account: self
                .instruction
                .staker_account
                .expect("staker_account is not set"),

            xorca_state_account: self
                .instruction
                .xorca_state_account
                .expect("xorca_state_account is not set"),

            xorca_state_orca_ata: self
                .instruction
                .xorca_state_orca_ata
                .expect("xorca_state_orca_ata is not set"),

            staker_orca_ata: self
                .instruction
                .staker_orca_ata
                .expect("staker_orca_ata is not set"),

            orca_mint_account: self
                .instruction
                .orca_mint_account
                .expect("orca_mint_account is not set"),

            xorca_mint_account: self
                .instruction
                .xorca_mint_account
                .expect("xorca_mint_account is not set"),

            system_program_account: self
                .instruction
                .system_program_account
                .expect("system_program_account is not set"),

            token_program_account: self
                .instruction
                .token_program_account
                .expect("token_program_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct StakeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    staker_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    xorca_state_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    xorca_state_orca_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    staker_orca_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    orca_mint_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    xorca_mint_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
